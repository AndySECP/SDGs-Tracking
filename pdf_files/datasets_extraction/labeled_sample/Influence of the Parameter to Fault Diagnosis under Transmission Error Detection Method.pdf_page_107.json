{" 97Hx1 = 1./(2.*pi).*(ib1./rhob + ia1.*y2./rhoa2 + ic1.*y2./rhoa2); Hy1 = 1./(2.*pi).*(ia1.*x./rhoa2 - ic1.*x./rhoa2);   Hx2 = 1./(2.*pi).*(ib2./rhob + ia2.*y2./rhoa2 + ic2.*y2./rhoa2); Hy2 = 1./(2.*pi).*(ia2.*x./rhoa2 - ic2.*x./rhoa2);   %Adding noise %Hx1 = Hx1 + wgn(len,1,-54,'dBm'); %Hy1 = Hy1 + wgn(len,1,-54,'dBm'); %Hx2 = Hx2 + wgn(len,1,-54,'dBm'); %Hy2 = Hy2 + wgn(len,1,-54,'dBm');     theta1 = atan2(Hy1,Hx1);    % converting time into theta and Hx  rho1 = (Hx1.^2 + Hy1.^2).^(1/2);  % and Hy into rho for polar plot theta2 = atan2(Hy2,Hx2); rho2 = (Hx2.^2 + Hy2.^2).^(1/2);     %Variable initialization     samplewaittime = (1./60).*(1./128); %In seconds - time to wait between testing a rho and using it as the baseline for a test. samplewaitx = round(samplewaittime./tstep.*10^6); %In samples maxminwaittime = (1./60).*(1./2).*(0.9); %Minimum seconds to wait between maxrhos and between minrhos (corresponds to 0.9 times half a cycle - minimum usable frequency is 54Hz) maxminwaitx = round(maxminwaittime./tstep.*10^6); %In samples   brkcorr = round(breaktime./tstep.*10^6); maxtime = 0.001;                %Maximum time that the field can spend below rhomin (in seconds) and still be classified as a fault. maxtimex = round(maxtime./tstep.*10^6); maxbelowtime = (1./60).*(1./8); %Maximum time to store data about a drop below minrho. maxbelowtimex = round(maxbelowtime./tstep.*10^6); faultmaxtime = 1000.*totlength./vel; %Time to wait between seeing a fault at one end of the line and the other end before determining that the fault was erroneous. faultmaxtimex = round(faultmaxtime.*1.5./tstep.*10^6); emaxtime = (1./60).*(1./64);    %Min time between maximums and minimums. emaxtimex = round(emaxtime./tstep.*10^6); ewaittime = (1./60).*(1./16); %Difference in testing times for ellipse maximum and minimum detection.  ewaittimex = round(ewaittime./tstep.*10^6); quartertime = (1./60).*(1./4)*(19./20); quartertimex = round(quartertime./tstep.*10^6); eighthtime = (1./60).*(1./8); eighthtimex = round(eighthtime./tstep.*10^6); rhomaxtime = (1./60).*(1./256); %Time over which rhomax is averaged. rhomaxtimex = round(rhomaxtime./tstep.*10^6); thetamaxtime = (1./60).*(1./256); %Time over which thetamax is averaged. thetamaxtimex = round(thetamaxtime./tstep.*10^6); thetamintimex = thetamaxtimex; ":0}